@use './variables' as *;

$cubeHeight: 10;
$cubeWidth: 10;
$depth: 10;
$hue: 180;
$sat: 20%;

.container {
  height: 100vh;
  max-height: 100%;
  width: 100vw;
  max-width: 100%;
  overflow: hidden;
  display: grid;
  place-items: center;
  perspective: 1000vmin;
  background: radial-gradient(circle at 50% 25%, $primaryBg, $secondaryColor);

  * {
    transform-style: preserve-3d;
  }

  .content {
    @include transform(rotateX(-35deg) rotateY(45deg));
    width: 20vmin;
    height: 20vmin;

    .cuboid {
      @include transform(translate3d(0vmin, 0vmin, -5vmin));
      height: calc($cubeHeight * 1vmin);
      width: calc($cubeWidth * 1vmin);
      position: absolute;
      animation: cube1 0.6s linear 0s infinite;
      -webkit-animation: cube1 0.6s linear 0s infinite;

      &:nth-child(2) {
        @include transform(translate3d(0vmin, 0vmin, 5vmin));
        animation-name: cube2;
      }

      &:nth-child(3) {
        @include transform(translate3d(10vmin, 0vmin, 5vmin));
        animation-name: cube3;
      }

      &:nth-child(4) {
        @include transform(translate3d(10vmin, 0vmin, -5vmin));
        animation-name: cube4;
      }

      & > div {
        position: absolute;
        top: 50%;
        left: 50%;
        height: 100%;
        width: 100%;
        border-radius: 2px;

        &:nth-of-type(1) {
          @include transform(translate3d(-50%, -50%, calc($depth * 0.5vmin)));
          background: hsl($hue, $sat, 60%);
        }

        &:nth-of-type(2) {
          @include transform(
            translate3d(-50%, -50%, calc($depth * -0.5vmin)) rotateY(180deg)
          );
          background: hsl($hue, $sat, 25%);
        }

        &:nth-of-type(3) {
          @include transform(
            translate(-50%, -50%) rotateY(90deg)
              translate3d(0, 0, calc($cubeWidth * 0.5vmin))
          );
          width: calc($depth * 1vmin);
          background: hsl($hue, $sat, 75%);
        }
        &:nth-of-type(4) {
          @include transform(
            translate(-50%, -50%) rotateY(-90deg)
              translate3d(0, 0, calc($cubeWidth * 0.5vmin))
          );
          width: calc($depth * 1vmin);
          background: hsl($hue, $sat, 40%);
        }
        &:nth-of-type(5) {
          @include transform(
            translate(-50%, -50%) rotateX(90deg)
              translate3d(0, 0, calc($cubeHeight * 0.5vmin))
          );
          height: calc($depth * 1vmin);
          background: hsl($hue, $sat, 75%);
        }
        &:nth-of-type(6) {
          @include transform(
            translate(-50%, -50%) rotateX(-90deg)
              translate3d(0, 0, calc($cubeHeight * 0.5vmin))
          );
          height: calc($depth * 1vmin);
          background: hsl($hue, $sat, 20%);
        }

        &:nth-of-type(6):before {
          @include transform(translateZ(30vmin));
          content: '';
          background: #0004;
          position: absolute;
          width: 10vmin;
          height: 10vmin;
          filter: blur(5px);
        }
      }
    }
  }
}

@keyframes cube1 {
  25% {
    @include transform(translate3d(0vmin, 0vmin, -10vmin));
  }
  75% {
    @include transform(translate3d(10vmin, 0vmin, -10vmin));
  }
  100% {
    @include transform(translate3d(10vmin, 0vmin, -5vmin));
  }
}

@keyframes cube2 {
  25% {
    @include transform(translate3d(0vmin, 0vmin, 0vmin));
  }
  75% {
    @include transform(translate3d(0vmin, 0vmin, 0vmin));
  }
  100% {
    @include transform(translate3d(0vmin, 0vmin, -5vmin));
  }
}

@keyframes cube3 {
  25% {
    @include transform(translate3d(10vmin, 0vmin, 10vmin));
  }
  75% {
    @include transform(translate3d(0vmin, 0vmin, 10vmin));
  }
  100% {
    @include transform(translate3d(0vmin, 0vmin, 5vmin));
  }
}

@keyframes cube4 {
  25% {
    @include transform(translate3d(10vmin, 0vmin, 0vmin));
  }
  75% {
    @include transform(translate3d(10vmin, 0vmin, 0vmin));
  }
  100% {
    @include transform(translate3d(10vmin, 0vmin, 5vmin));
  }
}
